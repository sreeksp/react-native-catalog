'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _index = require('./../react-transform-hmr/lib/index.js');

var _index2 = _interopRequireDefault(_index);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class,
    _temp,
    _jsxFileName = '/Users/spalaparty/react/ebayPassport/node_modules/react-native-tab-navigator/Tab.js';

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactNative = require('react-native');

var _ViewPropTypes = require('./config/ViewPropTypes');

var _ViewPropTypes2 = _interopRequireDefault(_ViewPropTypes);

var _Layout = require('./Layout');

var _Layout2 = _interopRequireDefault(_Layout);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  Tab: {
    displayName: 'Tab'
  }
};

var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: '/Users/spalaparty/react/ebayPassport/node_modules/react-native-tab-navigator/Tab.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _reactTransformHmrLibIndexJs2(Component, id);
  };
}

var Tab = _wrapComponent('Tab')((_temp = _class = function (_React$Component) {
  _inherits(Tab, _React$Component);

  function Tab(props, context) {
    _classCallCheck(this, Tab);

    var _this = _possibleConstructorReturn(this, (Tab.__proto__ || Object.getPrototypeOf(Tab)).call(this, props, context));

    _this._handlePress = _this._handlePress.bind(_this);
    return _this;
  }

  _createClass(Tab, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          title = _props.title,
          badge = _props.badge;

      var icon = null;
      if (_react3.default.Children.count(this.props.children) > 0) {
        icon = _react3.default.Children.only(this.props.children);
      }

      if (title) {
        title = _react3.default.createElement(
          _reactNative.Text,
          {
            numberOfLines: 1,
            allowFontScaling: !!this.props.allowFontScaling,
            style: [styles.title, this.props.titleStyle], __source: {
              fileName: _jsxFileName,
              lineNumber: 44
            }
          },
          title
        );
      }

      if (badge) {
        badge = _react3.default.cloneElement(badge, {
          style: [styles.badge, badge.props.style]
        });
      }

      var tabStyle = [styles.container, title ? null : styles.untitledContainer, this.props.style];
      if (!this.props.hidesTabTouch && _reactNative.Platform.OS === 'android' && _reactNative.Platform.Version >= 21) {
        return _react3.default.createElement(
          _reactNative.TouchableNativeFeedback,
          {
            testID: this.props.testID,
            background: _reactNative.TouchableNativeFeedback.Ripple(undefined, true),
            onPress: this._handlePress, __source: {
              fileName: _jsxFileName,
              lineNumber: 69
            }
          },
          _react3.default.createElement(
            _reactNative.View,
            { style: tabStyle, __source: {
                fileName: _jsxFileName,
                lineNumber: 73
              }
            },
            _react3.default.createElement(
              _reactNative.View,
              {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 74
                }
              },
              icon,
              badge
            ),
            title
          )
        );
      }
      return _react3.default.createElement(
        _reactNative.TouchableOpacity,
        {
          testID: this.props.testID,
          activeOpacity: this.props.hidesTabTouch ? 1.0 : 0.8,
          onPress: this._handlePress,
          style: tabStyle, __source: {
            fileName: _jsxFileName,
            lineNumber: 84
          }
        },
        _react3.default.createElement(
          _reactNative.View,
          {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 89
            }
          },
          icon,
          badge
        ),
        title
      );
    }
  }, {
    key: '_handlePress',
    value: function _handlePress(event) {
      if (this.props.onPress) {
        this.props.onPress(event);
      }
    }
  }]);

  return Tab;
}(_react3.default.Component), _class.propTypes = {
  testID: _propTypes2.default.string,
  title: _propTypes2.default.string,
  titleStyle: _reactNative.Text.propTypes.style,
  badge: _propTypes2.default.element,
  onPress: _propTypes2.default.func,
  hidesTabTouch: _propTypes2.default.bool,
  allowFontScaling: _propTypes2.default.bool,
  style: _ViewPropTypes2.default.style
}, _temp));

exports.default = Tab;


var styles = _reactNative.StyleSheet.create({
  badge: {
    position: 'absolute',
    top: -6,
    right: -10
  },
  container: {
    flex: 1,
    flexDirection: 'column',
    justifyContent: 'flex-end',
    alignItems: 'center'
  },
  untitledContainer: {
    paddingBottom: 13
  },
  title: {
    color: '#929292',
    fontSize: 10,
    textAlign: 'center',
    alignSelf: 'stretch',
    marginTop: 4,
    marginBottom: 1 + _Layout2.default.pixel
  }
});